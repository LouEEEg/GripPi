from tkinter import*
from tkinter import messagebox
from configparser import ConfigParser
import serial
import time
import sys
from picamera2 import Picamera2, Preview
import cv2
import os

RESOLUTION = "1024x768"

root=Tk()
root.title("GripPi")
root.geometry(RESOLUTION)
root["bg"]="#0066FC"
root.attributes('-fullscreen', True)

config = ConfigParser()
config.read('config.ini')

#Pi camera instance
picam2 = Picamera2()
preview_config = picam2.create_preview_configuration(main={"size": (341, 341)})
picam2.configure(preview_config)
picam2.start()

photo1 = PhotoImage(file = "bin1.png")
photo2 = PhotoImage(file = "bin2.png")
photo3 = PhotoImage(file = "bin3.png")
empty_bin_image = PhotoImage(file = "EmptyBin_small.png")

bin1_image = PhotoImage(file = config.get('image', 'bin1_image'))
bin2_image = PhotoImage(file = config.get('image', 'bin2_image'))
bin3_image = PhotoImage(file = config.get('image', 'bin3_image'))

class gripPiBin:
    def __init__(self, isEmpty, image):
        self.isEmpty = isEmpty
        self.image = image
        
bin1 = gripPiBin(config.getboolean('main', 'bin1_isEmpty'), bin1_image)
bin2 = gripPiBin(config.getboolean('main', 'bin2_isEmpty'), bin2_image)
bin3 = gripPiBin(config.getboolean('main', 'bin3_isEmpty'), bin3_image)

class widgets:
    def __init__(self, Button):
        self.Button = Button

# --- This function needs to be changed to serial_test_GripPi function
# --- homeSet variable is returned but not used as conditional
def GripPiSerial(GripPiTx):
    GripPiRx = 77
    Tx_b = bytes(GripPiTx,'utf-8')
    
    if __name__ == '__main__':
        ser = serial.Serial('/dev/ttyACM0', 9600, timeout=1)
        ser.reset_input_buffer()
        ser.write(Tx_b)
        #while GripPiRx == 77:
            #while ser.in_waiting > 0:
                #GripPiRx = ser.read_until().decode('utf-8').rstrip()
    return GripPiRx



CalibrateStartup = "<999,300,350,90>"
CalibrateHome = "<998,300,350,90>"
#RestHome = "<800,800,0,90>"
RestPosition = "<200,45,360,90>"

BinOpen1="<485,210,315,90>"
BinOpen2="<485,210,148,90>"
BinOpen3="<485,210,0,90>"

BinToUser="<1,70,345,130>"
UserOpen="<1,70,345,90>"

UserToCamera="<300,70,300,130>"
CameraToBin1="<485,210,315,130>"
CameraToBin2="<485,210,148,130>"
CameraToBin3="<485,210,0,130>"

ReturnToIdle="<127,300,348,90>"

gripPi_calibration = False

global Bin_in
Bin_in = True

def calibrate():
    messagebox.showwarning("WARNING", "Clear workspace before Calibrating")
    homeSet = GripPiSerial(CalibrateStartup)
    global gripPi_calibration
    gripPi_calibration = True 

def close_gui():
    if(not(gripPi_calibration)):
        sys.exit()
    else:  
        #homeSet = GripPiSerial(RestHome)
        homeSet = GripPiSerial(RestPosition)
        sys.exit()

def forget(widget):
    widget.pack_forget

def retrieve(widget):
    widget.pack(side=LEFT)
    
def screenHome():
    
    def isCalibrated():
        if(not(gripPi_calibration)):
            messagebox.showerror("ERROR", "GripPi must be calibrated prior to use!")
        else:
            screenItemSelect()
    
    # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- 
    # --- --- --- --- --- --- --- Item Selection Screen - --- --- --- --- --- --- --- 
    # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
    def screenItemSelect():
        
        homeLabel.destroy()
        clearWorkspaceLabel.destroy()
        powerButton.destroy()
        calibrateButton.destroy()
        motionControlButton.destroy()
        binsButton.destroy()

        # --- --- --- Top of page 2 --- --- --- #
        selectItemLabel=Label(root, text="Select an Item", font=("Times_New_Roman",25), anchor="e", justify=CENTER)
        selectItemLabel.pack(side=TOP)
        
        def back():
            selectItemLabel.destroy()
            backButton.destroy()
            itemButtonLeft.destroy()
            itemButtonCenter.destroy()
            itemButtonRight.destroy()
            screenHome()  
        
        def isReturned():
             global Bin_in
             if(not(Bin_in)):
                 messagebox.showerror("ERROR", "Bin must be returned to storage!")
             else:
                 Bin_in = True
                 back()
                 
        backButton = Button(root,text="BACK",font=("Times_New_Roman",25),command=lambda: [isReturned()],activebackground="red")
        backButton.pack(side=BOTTOM)
        
        itemButtonLeft = Button(root,image=bin1.image,command=lambda: [updateItemButtonLeft()],activebackground="red", justify=LEFT)
        itemButtonLeft.pack(side=LEFT)
        
        itemButtonCenter = Button(root,image=bin2.image,command=lambda: [updateItemButtonCenter()],activebackground="red", justify=CENTER)
        itemButtonCenter.pack(side=LEFT)
        
        itemButtonRight = Button(root,image=bin3.image,command=lambda: [updateItemButtonRight()],activebackground="red", justify=RIGHT)
        itemButtonRight.pack(side=LEFT)
        
        def updateItemButtonLeft():  
            if itemButtonLeft:
                itemButtonCenter.pack_forget()
                itemButtonRight.pack_forget()
                if bin1.isEmpty :
                    #STORAGE FROM USER TO SHELF
                    homeSet = GripPiSerial(UserToCamera)
                    time.sleep(10)
                    picam2.capture_file("bin1.png")
                    photo1 = PhotoImage(file = "bin1.png")
                    itemButtonLeft.configure(image=photo1)
                    bin1.image = photo1
                    config.set('main', 'bin1_isEmpty', 'False')
                    config.set('image', 'bin1_image', 'bin1.png')
                    homeSet = GripPiSerial(CameraToBin1)
                    homeSet = GripPiSerial(ReturnToIdle)
                    global Bin_in
                    Bin_in = True
                    bin1.isEmpty = False
                    retrieve(itemButtonCenter)
                    retrieve(itemButtonRight)
                    itemButtonLeft.configure(image = photo1)
                      
                elif not bin1.isEmpty :
                    #RETRIEVAL FROM SHELF TO USER
                    itemButtonLeft.configure(image=empty_bin_image)
                    bin1.image = empty_bin_image
                    config.set('main', 'bin1_isEmpty', 'True')
                    config.set('image', 'bin1_image', 'EmptyBin_small.png')
                    Bin_in = False
                    bin1.isEmpty = True
                    homeSet = GripPiSerial(BinOpen1)
                    homeSet = GripPiSerial(BinToUser)
                    homeSet = GripPiSerial(UserOpen)
                
                with open('config.ini', 'w', encoding = "UTF-8") as f:
                    config.write(f)                                          
                
        def updateItemButtonCenter():
            if itemButtonCenter:
                itemButtonLeft.pack_forget()
                itemButtonRight.pack_forget()
                if bin2.isEmpty :
                    homeSet = GripPiSerial(UserToCamera)
                    time.sleep(10)
                    picam2.capture_file("bin2.png")
                    photo2 = PhotoImage(file = "bin2.png")
                    itemButtonCenter.configure(image=photo2)
                    bin2.image = photo2
                    config.set('main', 'bin2_isEmpty', 'False')
                    config.set('image', 'bin2_image', 'bin2.png')
                    homeSet = GripPiSerial(CameraToBin2)
                    homeSet = GripPiSerial(ReturnToIdle)
                    global Bin_in
                    Bin_in = True
                    bin2.isEmpty = False
                    retrieve(itemButtonLeft)
                    retrieve(itemButtonRight)
                    itemButtonCenter.configure(image = photo2) 
                    
                elif not bin2.isEmpty :
                    itemButtonCenter.configure(image=empty_bin_image)
                    bin2.image = empty_bin_image
                    config.set('main', 'bin2_isEmpty', 'True')
                    config.set('image', 'bin2_image', 'EmptyBin_small.png')
                    Bin_in = False
                    bin2.isEmpty = True
                    homeSet = GripPiSerial(BinOpen2)
                    homeSet = GripPiSerial(BinToUser)
                    homeSet = GripPiSerial(UserOpen)
                    
                with open('config.ini', 'w', encoding = "UTF-8") as f:
                    config.write(f)
                
        def updateItemButtonRight():
            if itemButtonRight:
                itemButtonLeft.pack_forget()
                itemButtonCenter.pack_forget()
                if bin3.isEmpty :
                    homeSet = GripPiSerial(UserToCamera)
                    time.sleep(10)
                    picam2.capture_file("bin3.png")
                    photo3 = PhotoImage(file = "bin3.png")
                    itemButtonRight.configure(image=photo3)
                    bin3.image = photo3
                    config.set('main', 'bin3_isEmpty', 'False')
                    config.set('image', 'bin3_image', 'bin3.png')
                    homeSet = GripPiSerial(CameraToBin3)
                    homeSet = GripPiSerial(ReturnToIdle)
                    global Bin_in
                    Bin_in = True
                    bin3.isEmpty = False
                    retrieve(itemButtonLeft)
                    retrieve(itemButtonCenter)
                    itemButtonRight.configure(image = photo3)
                    
                elif not bin3.isEmpty :
                    itemButtonRight.configure(image=empty_bin_image)
                    bin3.image = empty_bin_image
                    config.set('main', 'bin3_isEmpty', 'True')
                    config.set('image', 'bin3_image', 'EmptyBin_small.png')
                    Bin_in = False
                    bin3.isEmpty = True
                    homeSet = GripPiSerial(BinOpen3)
                    homeSet = GripPiSerial(BinToUser)
                    homeSet = GripPiSerial(UserOpen)
                    
                with open('config.ini', 'w', encoding = "UTF-8") as f:
                    config.write(f)
                
    # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- 
    # --- --- --- --- --- --- --- Motion Control Screen - --- --- --- --- --- --- --- 
    # --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- 

    def screenMotionControl():
        homeLabel.destroy()
        clearWorkspaceLabel.destroy()
        powerButton.destroy()
        calibrateButton.destroy()
        motionControlButton.destroy()
        binsButton.destroy()     
        
        def back():
            backButton.destroy()
            MeasureButtonLeft.destroy()
            MeasureButtonCenter.destroy()
            MeasureButtonRight.destroy()
            screenHome()
            
        def MeasureLeft():
            cmd1 = "python '/home/grippi/GripPi Project (GUI)/Final/OpenCV_test.py' --image '/home/grippi/GripPi Project (GUI)/Final/bin1.png' --width 0.7900"
            os.system(cmd1)
        
        def MeasureCenter():
            cmd2 = "python '/home/grippi/GripPi Project (GUI)/Final/OpenCV_test.py' --image '/home/grippi/GripPi Project (GUI)/Final/bin2.png' --width 0.7900"
            os.system(cmd2)
       
        def MeasureRight():
            cmd3 = "python '/home/grippi/GripPi Project (GUI)/Final/OpenCV_test.py' --image '/home/grippi/GripPi Project (GUI)/Final/bin3.png' --width 0.7900"
            os.system(cmd3)
       
        backButton = Button(root,text="BACK",font=("Times_New_Roman",25),command=lambda: [back()],activebackground="red")
        backButton.pack(side=BOTTOM)
        
        MeasureButtonLeft = Button(root,image=bin1.image,command=lambda: [MeasureLeft()],activebackground="red", justify=LEFT)
        MeasureButtonLeft.pack(side=LEFT)
       
        MeasureButtonCenter = Button(root,image=bin2.image,command=lambda: [MeasureCenter()],activebackground="red", justify=CENTER)
        MeasureButtonCenter.pack(side=LEFT)
        
        MeasureButtonRight = Button(root,image=bin3.image,command=lambda: [MeasureRight()],activebackground="red", justify=RIGHT)
        MeasureButtonRight.pack(side=LEFT)
    
    homeLabel=Label(root,text="GripPi",font=("Times_New_Roman",25), anchor="e", justify=CENTER)
    homeLabel.pack(side=TOP)
    
    clearWorkspaceLabel=Label(root,text="Please clear the workspace before calibrating!",font=("Times_New_Roman",25))
    clearWorkspaceLabel.place(relx=.5,rely=.5,anchor=CENTER)
    
    powerButton=Button(root,text="POWER",font=("Times_New_Roman",25),command=close_gui,activebackground="red")
    powerButton.pack(side=BOTTOM)
    
    calibrateButton=Button(root,text="CALIBRATE",font=("Times_New_Roman",75),command = lambda: [calibrate()],background="green",activebackground="red")
    calibrateButton.place(relx=.5,rely=.25,anchor= CENTER)
    
    motionControlButton=Button(root,text="Object Measurements",font=("Times_New_Roman",25),command=screenMotionControl,background="green",activebackground="red")
    motionControlButton.place(relx=0.8,rely=.95,anchor= CENTER)
    
    binsButton=Button(root, text="BINS", font=("Times_New_Roman",100), command = lambda: [isCalibrated()], background="green",activebackground="red")
    binsButton.place(relx=.5,rely=0.725,anchor= CENTER)
    

screenHome()

root.mainloop()
